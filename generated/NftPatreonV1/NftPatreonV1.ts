// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BuyKey extends ethereum.Event {
  get params(): BuyKey__Params {
    return new BuyKey__Params(this);
  }
}

export class BuyKey__Params {
  _event: BuyKey;

  constructor(event: BuyKey) {
    this._event = event;
  }

  get buy(): BuyKeyBuyStruct {
    return changetype<BuyKeyBuyStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class BuyKeyBuyStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get protocolFee(): BigInt {
    return this[4].toBigInt();
  }

  get nftFee(): BigInt {
    return this[5].toBigInt();
  }

  get referralFee(): BigInt {
    return this[6].toBigInt();
  }

  get totalSupply(): BigInt {
    return this[7].toBigInt();
  }

  get supplyPerUser(): BigInt {
    return this[8].toBigInt();
  }
}

export class ClaimReferral extends ethereum.Event {
  get params(): ClaimReferral__Params {
    return new ClaimReferral__Params(this);
  }
}

export class ClaimReferral__Params {
  _event: ClaimReferral;

  constructor(event: ClaimReferral) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get userCommission(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get userReferralCount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get referralFeePool(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get referralCount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ReferralAllowance extends ethereum.Event {
  get params(): ReferralAllowance__Params {
    return new ReferralAllowance__Params(this);
  }
}

export class ReferralAllowance__Params {
  _event: ReferralAllowance;

  constructor(event: ReferralAllowance) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get referralCode(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get referralAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SellKey extends ethereum.Event {
  get params(): SellKey__Params {
    return new SellKey__Params(this);
  }
}

export class SellKey__Params {
  _event: SellKey;

  constructor(event: SellKey) {
    this._event = event;
  }

  get sell(): SellKeySellStruct {
    return changetype<SellKeySellStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class SellKeySellStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get protocolFee(): BigInt {
    return this[4].toBigInt();
  }

  get nftFee(): BigInt {
    return this[5].toBigInt();
  }

  get totalSupply(): BigInt {
    return this[6].toBigInt();
  }

  get supplyPerUser(): BigInt {
    return this[7].toBigInt();
  }
}

export class NftPatreonV1 extends ethereum.SmartContract {
  static bind(address: Address): NftPatreonV1 {
    return new NftPatreonV1("NftPatreonV1", address);
  }

  balanceKeys(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "balanceKeys",
      "balanceKeys(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceKeys(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceKeys",
      "balanceKeys(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkReferralFeeBalance(): BigInt {
    let result = super.call(
      "checkReferralFeeBalance",
      "checkReferralFeeBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_checkReferralFeeBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkReferralFeeBalance",
      "checkReferralFeeBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyPrice(tokenId: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "getBuyPrice",
      "getBuyPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBuyPrice(
    tokenId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyPrice",
      "getBuyPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyPriceAfterFee(tokenId: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "getBuyPriceAfterFee",
      "getBuyPriceAfterFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBuyPriceAfterFee(
    tokenId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyPriceAfterFee",
      "getBuyPriceAfterFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrice(supply: BigInt, amount: BigInt): BigInt {
    let result = super.call("getPrice", "getPrice(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(supply),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(supply: BigInt, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPrice",
      "getPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(supply),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSellPrice(tokenId: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "getSellPrice",
      "getSellPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSellPrice(
    tokenId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSellPrice",
      "getSellPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSellPriceAfterFee(tokenId: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "getSellPriceAfterFee",
      "getSellPriceAfterFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSellPriceAfterFee(
    tokenId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSellPriceAfterFee",
      "getSellPriceAfterFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserBalanceKeys(tokenId: BigInt): BigInt {
    let result = super.call(
      "getUserBalanceKeys",
      "getUserBalanceKeys(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getUserBalanceKeys(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserBalanceKeys",
      "getUserBalanceKeys(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAllowlisted(param0: Address): boolean {
    let result = super.call("isAllowlisted", "isAllowlisted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isAllowlisted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAllowlisted",
      "isAllowlisted(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keySupply(param0: BigInt): BigInt {
    let result = super.call("keySupply", "keySupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_keySupply(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("keySupply", "keySupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftContract(): Address {
    let result = super.call("nftContract", "nftContract():(address)", []);

    return result[0].toAddress();
  }

  try_nftContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftContract", "nftContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nftFeePercentage(): BigInt {
    let result = super.call(
      "nftFeePercentage",
      "nftFeePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nftFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftFeePercentage",
      "nftFeePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolFeePercentage(): BigInt {
    let result = super.call(
      "protocolFeePercentage",
      "protocolFeePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolFeePercentage",
      "protocolFeePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolWallet(): Address {
    let result = super.call("protocolWallet", "protocolWallet():(address)", []);

    return result[0].toAddress();
  }

  try_protocolWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolWallet",
      "protocolWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  referralCounters(param0: Address): BigInt {
    let result = super.call(
      "referralCounters",
      "referralCounters(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_referralCounters(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referralCounters",
      "referralCounters(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referralFeePercentage(): BigInt {
    let result = super.call(
      "referralFeePercentage",
      "referralFeePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_referralFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referralFeePercentage",
      "referralFeePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userToReferralAddress(param0: Address): Address {
    let result = super.call(
      "userToReferralAddress",
      "userToReferralAddress(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_userToReferralAddress(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "userToReferralAddress",
      "userToReferralAddress(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _protocolWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nftContractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _protocolFeePercentage(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _nftFeePercentage(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _referralFeePercentage(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _referralRegistryAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyKeyCall extends ethereum.Call {
  get inputs(): BuyKeyCall__Inputs {
    return new BuyKeyCall__Inputs(this);
  }

  get outputs(): BuyKeyCall__Outputs {
    return new BuyKeyCall__Outputs(this);
  }
}

export class BuyKeyCall__Inputs {
  _call: BuyKeyCall;

  constructor(call: BuyKeyCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyKeyCall__Outputs {
  _call: BuyKeyCall;

  constructor(call: BuyKeyCall) {
    this._call = call;
  }
}

export class ClaimReferralFeeCall extends ethereum.Call {
  get inputs(): ClaimReferralFeeCall__Inputs {
    return new ClaimReferralFeeCall__Inputs(this);
  }

  get outputs(): ClaimReferralFeeCall__Outputs {
    return new ClaimReferralFeeCall__Outputs(this);
  }
}

export class ClaimReferralFeeCall__Inputs {
  _call: ClaimReferralFeeCall;

  constructor(call: ClaimReferralFeeCall) {
    this._call = call;
  }
}

export class ClaimReferralFeeCall__Outputs {
  _call: ClaimReferralFeeCall;

  constructor(call: ClaimReferralFeeCall) {
    this._call = call;
  }
}

export class EnterAllowlistWithReferralCall extends ethereum.Call {
  get inputs(): EnterAllowlistWithReferralCall__Inputs {
    return new EnterAllowlistWithReferralCall__Inputs(this);
  }

  get outputs(): EnterAllowlistWithReferralCall__Outputs {
    return new EnterAllowlistWithReferralCall__Outputs(this);
  }
}

export class EnterAllowlistWithReferralCall__Inputs {
  _call: EnterAllowlistWithReferralCall;

  constructor(call: EnterAllowlistWithReferralCall) {
    this._call = call;
  }

  get referralCode(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class EnterAllowlistWithReferralCall__Outputs {
  _call: EnterAllowlistWithReferralCall;

  constructor(call: EnterAllowlistWithReferralCall) {
    this._call = call;
  }
}

export class SellKeyCall extends ethereum.Call {
  get inputs(): SellKeyCall__Inputs {
    return new SellKeyCall__Inputs(this);
  }

  get outputs(): SellKeyCall__Outputs {
    return new SellKeyCall__Outputs(this);
  }
}

export class SellKeyCall__Inputs {
  _call: SellKeyCall;

  constructor(call: SellKeyCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SellKeyCall__Outputs {
  _call: SellKeyCall;

  constructor(call: SellKeyCall) {
    this._call = call;
  }
}

export class SetNftFeePercentageCall extends ethereum.Call {
  get inputs(): SetNftFeePercentageCall__Inputs {
    return new SetNftFeePercentageCall__Inputs(this);
  }

  get outputs(): SetNftFeePercentageCall__Outputs {
    return new SetNftFeePercentageCall__Outputs(this);
  }
}

export class SetNftFeePercentageCall__Inputs {
  _call: SetNftFeePercentageCall;

  constructor(call: SetNftFeePercentageCall) {
    this._call = call;
  }

  get _nftFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNftFeePercentageCall__Outputs {
  _call: SetNftFeePercentageCall;

  constructor(call: SetNftFeePercentageCall) {
    this._call = call;
  }
}

export class SetProtocolFeePercentageCall extends ethereum.Call {
  get inputs(): SetProtocolFeePercentageCall__Inputs {
    return new SetProtocolFeePercentageCall__Inputs(this);
  }

  get outputs(): SetProtocolFeePercentageCall__Outputs {
    return new SetProtocolFeePercentageCall__Outputs(this);
  }
}

export class SetProtocolFeePercentageCall__Inputs {
  _call: SetProtocolFeePercentageCall;

  constructor(call: SetProtocolFeePercentageCall) {
    this._call = call;
  }

  get _protocolFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolFeePercentageCall__Outputs {
  _call: SetProtocolFeePercentageCall;

  constructor(call: SetProtocolFeePercentageCall) {
    this._call = call;
  }
}

export class SetProtocolWalletCall extends ethereum.Call {
  get inputs(): SetProtocolWalletCall__Inputs {
    return new SetProtocolWalletCall__Inputs(this);
  }

  get outputs(): SetProtocolWalletCall__Outputs {
    return new SetProtocolWalletCall__Outputs(this);
  }
}

export class SetProtocolWalletCall__Inputs {
  _call: SetProtocolWalletCall;

  constructor(call: SetProtocolWalletCall) {
    this._call = call;
  }

  get _newProtocolWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetProtocolWalletCall__Outputs {
  _call: SetProtocolWalletCall;

  constructor(call: SetProtocolWalletCall) {
    this._call = call;
  }
}

export class SetReferralFeePercentageCall extends ethereum.Call {
  get inputs(): SetReferralFeePercentageCall__Inputs {
    return new SetReferralFeePercentageCall__Inputs(this);
  }

  get outputs(): SetReferralFeePercentageCall__Outputs {
    return new SetReferralFeePercentageCall__Outputs(this);
  }
}

export class SetReferralFeePercentageCall__Inputs {
  _call: SetReferralFeePercentageCall;

  constructor(call: SetReferralFeePercentageCall) {
    this._call = call;
  }

  get _referralFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetReferralFeePercentageCall__Outputs {
  _call: SetReferralFeePercentageCall;

  constructor(call: SetReferralFeePercentageCall) {
    this._call = call;
  }
}
